# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

# 동작 조건 설정: main 브랜치에 push 또는 pull_request가 발생하여 끝났을 때 동작.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: closed

permissions:
  contents: read

jobs:
  
  # Spring Boot 애플리케이션을 빌드하여 DockerHub에 Push
  build-docker-image:

    # 1. JAVA 17 세팅
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md

    # 1.5 Secret Key 설정
    - name: Setup secret
      env:
        SECRET_DIR: src/main/resources
        SECRET_FILENAME: applicaton-SECRET-KEY.yml
        OPENAI_API_KEY: ${{secrets.OPENAI_APIKEY}}
        ASSISTANT_ID_MOM: ${{secrets.OPENAI_ASSISTANTID_MOM}}
        ASSISTANT_ID_JOY: ${{secrets.OPENAI_ASSISTANTID_JOY}}
        ASSISTANT_ID_SADNESS: ${{secrets.OPENAI_ASSISTANTID_SADNESS}}
        ASSISTANT_ID_ANGER: ${{secrets.OPENAI_ASSISTANTID_ANGER}}
        ASSISTANT_ID_FEAR: ${{secrets.OPENAI_ASSISTANTID_FEAR}}
        ASSISTANT_ID_SUMMARY: ${{secrets.OPENAI_ASSISTANTID_SADNESS}}
        KAKAO_CLIENT_ID: ${{secrets.KAKAO_CLIENTID}}
        KAKAO_REDIRECT_URI: ${{secrets.KAKAO_REDIRECTURI}}
        JWT_SECRET_KEY: ${{secrets.JWT_SECRETKEY}}
      run: |
        mkdir ./src/main/resources
        echo "OPENAI:" >> $SECRET_DIR/$SECRET_FILENAME
        echo "  API-KEY: $OPENAI_API_KEY" >> $SECRET_DIR/$SECRET_FILENAME
        echo "  ASSISTANT-ID:" >> $SECRET_DIR/$SECRET_FILENAME
        echo "    MOM: $ASSISTANT_ID_MOM" >> $SECRET_DIR/$SECRET_FILENAME
        echo "    JOY: $ASSISTANT_ID_JOY" >> $SECRET_DIR/$SECRET_FILENAME
        echo "    SADNESS: $ASSISTANT_ID_SADNESS" >> $SECRET_DIR/$SECRET_FILENAME
        echo "    ANGER: $ASSISTANT_ID_ANGER" >> $SECRET_DIR/$SECRET_FILENAME
        echo "    FEAR: $ASSISTANT_ID_FEAR" >> $SECRET_DIR/$SECRET_FILENAME
        echo "    SUMMARY: $ASSISTANT_ID_SUMMARY" >> $SECRET_DIR/$SECRET_FILENAME
        echo "">> $SECRET_DIR/$SECRET_FILENAME
        echo "## KAKAO" >> $SECRET_DIR/$SECRET_FILENAME
        echo "KAKAO:" >> $SECRET_DIR/$SECRET_FILENAME
        echo "  CLIENT-ID: $KAKAO_CLIENT_ID" >> $SECRET_DIR/$SECRET_FILENAME
        echo "  REDIRECT-URI: $KAKAO_REDIRECT_URI" >> $SECRET_DIR/$SECRET_FILENAME
        echo "">> $SECRET_DIR/$SECRET_FILENAME
        echo "## JWT" >> $SECRET_DIR/$SECRET_FILENAME
        echo "JWT:" >> $SECRET_DIR/$SECRET_FILENAME
        echo "  SECRET-KEY: $JWT_SECRET_KEY" >> $SECRET_DIR/$SECRET_FILENAME

    # 2. Spring Boot 어플리케이션 빌드
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      with:
        arguments: clean bootJar

    # 3. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/hida-application .

    # 4. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # 5. Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/hida-application


    # 위의 단계까지 CI
    # 아래의 단계부터 CD

    # 위 과정에서 푸시한 이미지를 server에서 풀받아서 실행시키는 과정 
  run-image-on-server:
    # build-docker-image (위)과정이 완료되어야 실행됩니다.
    needs: build-docker-image
    runs-on: self-hosted

    steps:

      - name: Set PowerShell Execution Policy
        run: |
          powershell -Command "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force"
        shell: cmd
       
      # 1. 최신 이미지를 풀받습니다
      - name: docker pull
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/hida-application
        shell: cmd

      
      # 2. 기존의 컨테이너를 중지시킵니다
      - name: docker-compose down
        run: docker-compose down
        shell: cmd


      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker-compose up
        run: docker-compose up -d
        shell: cmd

        
      # 4. 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: docker system prune -f
        shell: cmd

